plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.bmuschko.docker-remote-api'
}

ext {
    set('springCloudVersion', "2021.0.5")
}

def localRegistry = false
def dockerAPIHost=  System.getenv("DOCKER_HOST") ?: "" // tcp://x.x.x.x:2376
def localRegHost = ""

if (dockerAPIHost != "") {
  localRegistry = true
  localRegHost = "${dockerAPIHost.substring(6, dockerAPIHost.lastIndexOf(":"))}:5000"
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

task createDockerfile(type: Dockerfile) {
  destFile = project.file('build/docker/Dockerfile')
  from "eclipse-temurin:11"
  label(['maintainer': 'Manuel Calvo "manuel.calvo.cantillo@gmail.com"'])
  copyFile "${bootJar.archiveFileName.get()}", "/app/app.jar"
  environmentVariable "JAVA_OPTS", ""
  entryPoint "java"
  defaultCommand "-jar", "/app/app.jar"
}

task syncAppArchive(type: Sync) {
  dependsOn assemble
  from bootJar.archivePath
  into createDockerfile.getDestDir()
}

createDockerfile.dependsOn syncAppArchive

task buildImage(type: DockerBuildImage) {
  dependsOn createDockerfile
  inputDir = createDockerfile.getDestDir()
  quiet = true
  pull = false
  images.add( "${project.group}/${project.name}:${project.version}" )
  if (localRegistry) images.add( "${localRegHost}/${project.name}:${project.version}" )
}


task pushImage(type: DockerPushImage) {
  dependsOn buildImage
  images.add( "${localRegHost}/${project.name}:${project.version}" )
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-config'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}