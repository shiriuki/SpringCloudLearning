
#### App own properties
server.port=8889

#### Eureka related
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.registryFetchIntervalSeconds=10
eureka.client.serviceUrl.defaultZone=${DISCOVERY_SERVICES:http://localhost:8889/eureka/}

eureka.instance.hostname=${DISCOVERY_SERVICE_HOST:localhost}
eureka.instance.preferIpAddress=true
# Tells which zone it serves.
eureka.instance.metadataMap.zone=${DISCOVERY_SERVICE_ZONE:default}

# How often it sends heartbeats.
eureka.instance.lease-renewal-interval-in-seconds=5

# Time the server waits since it received the last heartbeat before it can remove this service. It won't be removed
# automatically at that moment, it has to wait until the periodic eviction process is executed.
eureka.instance.lease-expiration-duration-in-seconds=10

# Self-preservation avoids unregistering services when a possible network failure seems to be detected.
# See: https://medium.com/@fahimfarookme/the-mystery-of-eureka-self-preservation-f2db91454f2d
# https://www.baeldung.com/eureka-self-preservation-renewal
eureka.server.enable-self-preservation=true

# How often services should be sending heartbeats.
eureka.server.expected-client-renewal-interval-seconds=5

# Based on this property, the server calculates the expected heartbeats per minute from all the registered services.
# A expected threshold of 0.85 means in normal conditions a minimum of 85% of the total possible heartbeats will come.
eureka.server.renewal-percent-threshold=0.85

# A scheduler runs at this frequency to calculate the expected heartbeats per minute. This property only makes sense
# when self-preservation is enabled.
eureka.server.renewal-threshold-update-interval-ms=5000

# Tells the server to run a job at this frequency to evict the expired services. If it detects the number of expected
# heartbeats per minute is lower than the actual number and self-preservation is enabled then it won't unregister,
# because it assumes a network issue is happening and that is why the heartbeats are not coming.
eureka.server.eviction-interval-timer-in-ms=5000

# How often the response cache is invalidated.
eureka.server.responseCacheUpdateIntervalMs=5000

#### Actuator related
# See https://docs.spring.io/spring-boot/docs/2.1.11.RELEASE/reference/html/production-ready-endpoints.html
info.app.name=Service Discovery Agent Microservice
info.app.description=Service Discovery Agent application
info.app.version=1.0.0

spring.jmx.enabled=true

management.endpoints.enabled-by-default=false
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.info.env.enabled=true
management.endpoints.web.exposure.include=info, health

